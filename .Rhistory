d_teams$Team[1]
ID_search(d_teams$[1])
ID_search(d_teams$Team[1])
L <- length(d_teams$Team)
ID_search(d_teams$Team[1])
L <- length(d_teams$Team)
for (j in 1:L){
id <- d_teams$Team[j]
d_teams[2:3,j] <- ID_search(id)
}
View(d_teams)
#Write a submission for the Kaggle competition with 68*67/2 win probabilities
yr <- 2021
file <- paste("TourneyTeams", yr, ".csv", sep = "")
d_teams <- read.csv(file, header = FALSE, sep = ",")
head(d_teams)
names(d_teams) <- c("Team")
d_teams$TeamName <- NA
d_teams$TeamID <- 0
d_teams$Team[1]
ID_search(d_teams$Team[1])
L <- length(d_teams$Team)
for (j in 1:L){
id <- d_teams$Team[j]
d_teams[j,2:3] <- ID_search(id)
}
View(d_teams)
d_teams$Team
d_teams
ID_search("Texas S")
ID_search("Texas So")
ID_search("Texas Sout")
name_search("Texas")
name_search("Texas", DTeams$TeamName)
name_search("Texas", DTeams$scores)
DTeams[DTeams$scores == "TexasSouthern"]
DTeams[DTeams$scores == "TexasSouthern",]
#Write a submission for the Kaggle competition with 68*67/2 win probabilities
yr <- 2021
file <- paste("TourneyTeams", yr, ".csv", sep = "")
d_teams <- read.csv(file, header = FALSE, sep = ",")
head(d_teams)
names(d_teams) <- c("Team")
d_teams$TeamName <- NA
d_teams$TeamID <- 0
#d_teams$Team[1]
#ID_search("Texas Sout")
#name_search("Texas", DTeams$scores)
#DTeams[DTeams$scores == "TexasSouthern",]
L <- length(d_teams$Team)
for (j in 1:L){
id <- d_teams$Team[j]
d_teams[j,2:3] <- ID_search(id)
}
d_teams
sort(d_teams$TeamID)
IDascd <- sort(d_teams$TeamID)
n <- length(IDascd)
N <- n*(n-1)/2
Ksub <- data.frame(matrix(nrow = N, ncol =2, data = NA))
names(Ksub) <- c("ID", "Pred")
j <- 1
n <- length(IDascd)
N <- n*(n-1)/2
Ksub <- data.frame(matrix(nrow = N, ncol =2, data = NA))
names(Ksub) <- c("ID", "Pred")
i <- 1
for (j in 1:n){
for (k in (j+1):n){
id1 <- IDascd[j]
id2 <- IDascd[k]
label <- paste(yr, id1, id2, sep = "_")
wprob <- ha1_wprob(id1, id2, neutral = TRUE)
Ksub[i,] <- c(label, wprob)
}
}
IDascd <- sort(d_teams$TeamID)
n <- length(IDascd)
N <- n*(n-1)/2
Ksub <- data.frame(matrix(nrow = N, ncol =2, data = NA))
names(Ksub) <- c("ID", "Pred")
i <- 1
for (j in 1:n){
ID_to_name(1414)
)
n <- length(IDascd)
N <- n*(n-1)/2
Ksub <- data.frame(matrix(nrow = N, ncol =2, data = NA))
names(Ksub) <- c("ID", "Pred")
i <- 1
for (j in 1:n){
for (k in (j+1):n){
id1 <- IDascd[j]
id2 <- IDascd[k]
label <- paste(yr, id1, id2, sep = "_")
wprob <- ha1_wprob(id1, id2, neutral = TRUE)
Ksub[i,] <- c(label, wprob)
i <- i+1
}
print(paste(N-(i-1), "rows remain"))
}
Ksub
head(Ksub, n = 10)
tail(Ksub, n = 20)
IDascd <- sort(d_teams$TeamID)
file <- paste("Ksubmission", yr, ".csv", sep = "")
HAWP_str("Gonzaga", "Norfolk St")
HAWP_str("Oklahoma", "Missouri")
HAWP_str("Creighton", "UC Santa Barbara")
HAWP_str("Virginia", "Ohio")
HAWP_str("USC", "Drake")
HAWP_str("Kansas", "E Washington")
HAWP_str("Oregon", "VCU")
HAWP_str("Iowa", "Grand Canyon")
HAWP_str("Michigan", "TX Southern")
HAWP_str("LSU", "St Bonaventure")
HAWP_str("Colorado", "Georgetown")
HAWP_str("Florida St", "UNC Greensboro")
HAWP_str("BYU", "Michigan St")
HAWP_str("BYU", "UCLA")
HAWP_str("Texas", "Abilene Ch")
HAWP_str("Connecticuit", "Maryland")
HAWP_str("Alabama", "Iona")
HAWP_str("Alabama", "Connecticuit")
HAWP_str("Texas", "BYU")
HAWP_str("Colorado", "Florida St")
HAWP_str("Michigan", "St Bonaventure")
HAWP_str("Oregon", "Iowa")
HAWP_str("Kansas", "USC")
HAWP_str("Creighton", "Virginia")
HAWP_str("Gonzaga", "Oklahoma")
HAWP_str("Gonzaga", "Creighton")
HAWP_str("Iowa", "Kansas")
HAWP_str("Michigan", "Florida St")
HAWP_str("Alabama", "BYU")
HAWP_str("Alabama", "Michigan")
HAWP_str("Gonzaga", "Iowa")
HAWP_str("Gonzaga", "Michigan")
HAWP_str("Baylor", "Hartford")
HAWP_str("North Carolina", "Wisconsin")
HAWP_str("Villanova", "Winthrop")
HAWP_str("Purdue", "North Texas")
HAWP_str("Texas Tech", "Utah St")
HAWP_str("Arkansas", "Colgate")
HAWP_str("Florida", "Virginia Tech")
HAWP_str("Ohio St", "Oral Roberts")
HAWP_str("Illinois", "Drexel")
HAWP_str("Loyola Chicago", "Georgia Tech")
HAWP_str("Tennessee", "Oregon St")
HAWP_str("Oklahoma St", "Liberty")
HAWP_str("San Diego St", "Syracuse")
HAWP_str("West Virginia", "Morehead St")
HAWP_str("Clemson", "Rutgers")
HAWP_str("Houston", "Cleveland St")
HAWP_str("Houston", "Rutgers")
HAWP_str("West Virginia", "San Diego St")
HAWP_str("Tennesse", "Oklahoma St")
HAWP_str("Illinois", "Chicago")
HAWP_str("Illinois", "Loyola Chicago")
HAWP_str("Ohio St", "Florida")
HAWP_str("Colgate", "Texas Tech")
HAWP_str("Purdue", "Villanova")
HAWP_str("Baylor", "North Carolina")
HAWP_str("Baylor", "Villanova")
HAWP_str("Colgate", "Ohio St")
HAWP_str("Illinois", "Tennessee")
HAWP_str("San Diego St", "Houston")
HAWP_str("San Diego St", "Illinois")
HAWP_str("Baylor", "Villanova")
HAWP_str("Baylor", "Colgate")
HAWP_str("Baylor", "Illinois")
HAWP_str("Gonzaga", "Illinois")
HAWP_str("Gonzaga", "Alabama")
yr <- 2021
file <- paste("TourneyTeams", yr, ".csv", sep = "")
d_teams <- read.csv(file, header = FALSE, sep = ",")
head(d_teams)
names(d_teams) <- c("Team")
d_teams$TeamName <- NA
d_teams$TeamID <- 0
#d_teams$Team[1]
#ID_search("Texas Sout")
#name_search("Texas", DTeams$scores)
#DTeams[DTeams$scores == "TexasSouthern",]
L <- length(d_teams$Team)
for (j in 1:L){
id <- d_teams$Team[j]
d_teams[j,2:3] <- ID_search(id)
}
d_teams
IDascd <- sort(d_teams$TeamID)
n <- length(IDascd)
N <- n*(n-1)/2
Ksub <- data.frame(matrix(nrow = N, ncol =2, data = NA))
names(Ksub) <- c("ID", "Pred")
i <- 1
for (j in 1:(n-1)){
for (k in (j+1):n){
id1 <- IDascd[j]
id2 <- IDascd[k]
label <- paste(yr, id1, id2, sep = "_")
wprob <- ha1_wprob(id1, id2, neutral = TRUE)
Ksub[i,] <- c(label, wprob)
i <- i+1
}
print(paste(N-(i-1), "rows remain"))
}
head(Ksub, n = 10)
tail(Ksub, n = 20)
#Verify that the labels in my submission match the sample submission
path <- "Kaggle Data/MDataFiles_Stage2/MSampleSubmissionStage2.csv"
sample <-read.csv(path, header = TRUE, sep = ",")
head(sample)
sum(sample$ID!= Ksub$ID)
file <- paste("KsubmissionHA1", yr, ".csv", sep = "")
write.table(Ksub, file = file, row.names = FALSE, col.names = TRUE)
n <- length(IDascd)
N <- n*(n-1)/2
Ksub <- data.frame(matrix(nrow = N, ncol =2, data = NA))
names(Ksub) <- c("ID", "Pred")
i <- 1
for (j in 1:(n-1)){
for (k in (j+1):n){
id1 <- IDascd[j]
id2 <- IDascd[k]
label <- paste(yr, id1, id2, sep = "_")
wprob <- ha1_wprob(id1, id2, neutral = TRUE)
Ksub[i,] <- data.frame(ID = label, Pred = wprob)
i <- i+1
}
print(paste(N-(i-1), "rows remain"))
}
summary(Ksub)
head(Ksub, n = 10)
IDascd <- sort(d_teams$TeamID)
n <- length(IDascd)
N <- n*(n-1)/2
Ksub <- data.frame(matrix(nrow = N, ncol =2, data = NA))
names(Ksub) <- c("ID", "Pred")
i <- 1
for (j in 1:(n-1)){
for (k in (j+1):n){
id1 <- IDascd[j]
id2 <- IDascd[k]
label <- paste(yr, id1, id2, sep = "_")
wprob <- ha1_wprob(id1, id2, neutral = TRUE)
Ksub[i,] <- data.frame(ID = label, Pred = wprob)
i <- i+1
}
print(paste(N-(i-1), "rows remain"))
}
head(Ksub, n = 10)
KSub[1:5,]
Ksub[1:5,]
Ksub$ID[1:5,]
Ksub$ID[1:5]
Ksub$Pred[1:5]
summary(Ksub)
head(sample)
sum(sample$ID!= Ksub$ID)
file <- paste("KsubmissionHA1", yr, ".csv", sep = "")
write.table(Ksub, file = file, row.names = FALSE, col.names = TRUE)
write.table(Ksub, file = file, row.names = FALSE, col.names = TRUE, sep = ",")
tail(Ksub)
head(reg_ssn)
ID_search("Gonzaga")
Gonzaga_games <- reg_ssn[reg_ssn$Home == 1211 | reg_ssn$Visitor == 1211,]
Gonzaga_games
ID_search("Illinois")
Illinois_games <- reg_ssn[reg_ssn$Home == 1228 | reg_ssn$Visitor == 1228,]
Illinois_hgames <- reg_ssn[reg_ssn$Home == 1228,]
Illinois_vgames <- reg_ssn[reg_ssn$Visitor == 1228,]
Gonzaga_hgames <- reg_ssn[reg_ssn$Home == 1211,]
Gonzaga_vgames <- reg_ssn[reg_ssn$visitor == 1211,]
Ill_avg <- mean(c(Illinois$hgames$Hscore, Illinois$Vscore))
Ill_avg <- mean(c(Illinois$hgames$Hscore, Illinois_vgames$Vscore))
Ill_avg <- mean(c(Illinoishgames$Hscore, Illinois_vgames$Vscore))
Ill_avg <- mean(c(Illinois_hgames$Hscore, Illinois_vgames$Vscore))
Gonz_avg <- mean(c(Gonzaga_hgames$Hscore, Gonzaga_vgames$Vscore))
mean(sum(Gonzaga_games$Hscore+Gonzaga_games$Vscore))
mean(Gonzaga_games$Hscore+Gonzaga_games$Vscore)
mean(Illinois_games$Hscore+Illinois_games$Vscore)
167+150
317/2
teams_bartorvik <- unique(teams$team)
teams_scores <- unique(scores$Team)
char_min <- stringdist::stringdist(teams_bartorvik[1],teams_scores)
results <- data.frame(cbind(teams_scores, char_min))
head(results)
#read in bartorvik data for the same year
file <- paste("cbb", yr2000, ".csv", sep = "")
#Choose Year for validation:
yr <- 2019
yr2000 <- yr - 2000
#read in bartorvik data for the same year
file <- paste("cbb", yr2000, ".csv", sep = "")
teams <- read.csv(file, header = TRUE, sep = ",")
head(teams)
teams_bartorvik <- unique(teams$team)
teams_scores <- unique(scores$Team)
char_min <- stringdist::stringdist(teams_bartorvik[1],teams_scores)
#read in team ids from Kaggle data
MTeams <- read.csv("Kaggle Data/MTeams.csv")
#read in team ids from Kaggle data
MTeams <- read.csv("Kaggle Data/MDataFiles_Stage2/MTeams.csv")
head(MTeams)
#For each team in Mteams, identify the team id from the scores data and the team data
#Here is a function for identifying the closest match between two vectors of strings
name_match <- function(x,y){
char_min <- stringdist::stringdist(x, y)
indx <- which.min(char_min)
y[indx]
}
name_search <- function(x,y){
y[grepl(x,y)]
}
#This functions lists the n best matches according to string dist
name_list <- function(name, list, n = 5){
char_min <- stringdist::stringdist(name,list)
results <- data.frame(cbind(list, char_min))
results[order(char_min)[1:n],]
}
name_list("Gonzaga", teams_bartorvik, 11)
teams_bartorvik <- unique(teams$team)
teams_bartorvik
head(teams)
#read in team ids from Kaggle data
MTeams <- read.csv("Kaggle Data/MDataFiles_Stage2/MTeams.csv")
#read in team ids from Kaggle data
MTeams <- read.csv("Kaggle Data/MDataFiles_Stage2/MTeams.csv")
head(MTeams)
#This function lets you search for a string x in list y
name_search <- function(x,y){
y[grepl(x,y)]
}
#This functions lists the n best matches according to string dist
name_list <- function(name, list, n = 5){
char_min <- stringdist::stringdist(name,list)
results <- data.frame(cbind(list, char_min))
results[order(char_min)[1:n],]
}
teams_bartorvik <- teams$TEAM
name_list("Gonzaga", teams_bartorvik, 11)
#Create a column in Mteams for the bartorvik ids
MTeams$bartorvik <- as.character(0)
L <- length(MTeams$TeamID)
for (j in 1:L){
name <- MTeams$TeamName[j]
b_name <- name_match(name, teams_bartorvik)
MTeams$bartorvik[j] <- b_name
}
head(MTeams)
#How many exact matches:
sum(MTeams$TeamName == MTeams$bartorvik)/371
exact <- MTeams$TeamName == MTeams$bartorvik
MTeams_keep <- MTeams[exact,]
MTeams_sort <- MTeams[!exact,]
#Remove team names that found an exact match
teams_bartorvik1 <- teams_bartorvik[!(teams_bartorvik %in% MTeams_keep$TeamName)]
head(teams_bartorvik1)
head(MTeams_sort)
#Repeat matching, but only look at bartrovik1 for matches
L <- length(MTeams_sort$TeamID)
for (j in 1:L){
name <- MTeams_sort$TeamName[j]
b_name <- name_match(name, teams_bartorvik1)
MTeams_sort$bartorvik[j] <- b_name
}
MTeams_sort
write.table(MTeams_sort, "bartorvik_sort.csv", col.names = T, row.names = F, sep = ",")
name_search("Arizona")
name_search("Arizona", teams_bartorvik1)
name_search("Birmingham", teams_bartorvik1)
name_search("Central", teams_bartorvik1)
name_search("Sacramento", teams_bartorvik1)
name_search("Cal", teams_bartorvik1)
name_search("S", teams_bartorvik1)
name_search("CS", teams_bartorvik1)
name_search("Cal State", teams_bartorvik1)
name_search("California", teams_bartorvik1)
name_search("St", teams_bartorvik1)
View(DTeams)
DTeams[DTeams$TeamID == 1170,]
name_search("Illinois", teams_bartorvik1)
name_search("East", teams_bartorvik1)
DTeams[DTeams$TeamID == 1188,]
DTeams[DTeams$TeamID == 1190,]
DTeams[DTeams$TeamID == 1198,]
DTeams[DTeams$TeamID == 1204,]
DTeams[DTeams$TeamID == 1212,]
DTeams[DTeams$TeamID == 1227,]
#First we will load the team list from 2021 as a point of reference
yr <- 2021
source(sort_functions)
source("sort_functions.R")
#Choose Year for validation:
yr <- 2019
yr2000 <- yr - 2000
#read in bartorvik data for the same year
file <- paste("cbb", yr2000, ".csv", sep = "")
teams <- read.csv(file, header = TRUE, sep = ",")
head(teams)
#read in bartorvik data for the same year
file <- paste("cbb", yr2000, ".csv", sep = "")
teams <- read.csv(file, header = TRUE, sep = ",")
head(teams)
#read in team ids from Kaggle data
MTeams <- read.csv("Kaggle Data/MDataFiles_Stage2/MTeams.csv")
head(MTeams)
#For each team in Mteams, identify the team id from thethe team data
#Here is a function for identifying the closest match between two vectors of strings
name_match <- function(x,y){
char_min <- stringdist::stringdist(x, y)
indx <- which.min(char_min)
y[indx]
}
#For each team in Mteams, identify the team id from thethe team data
#Functions for looking up name mathces have been loaded from sort_functions.R
teams_bartorvik <- teams$TEAM
name_list("Gonzaga", teams_bartorvik, 11)
name_match(MTeams$TeamName[1], teams_scores)
name_match(MTeams$TeamName[1], teams_bartorvik)
head(MTeams)
#Create a column in Mteams for the bartorvik ids
MTeams$bartorvik <- as.character(0)
L <- length(MTeams$TeamID)
#ID_to_name(1326)
#Convert ID to bartorvik name
ID_to_bar <- function(id){
indx <- DTeams$TeamID == id
if(sum(indx) == 1){
name <- DTeams$bartorvik[indx][1]
name
}else{
stop("ID not found")
}}
ID_to_bar(1102)
#Create a column in Mteams for the bartorvik ids
MTeams$bartorvik <- as.character(0)
head(MTeams)
L <- length(MTeams$TeamID)
for (j in 1:L){
ID <- MTeams$TeamID[j]
b_name <- ID_to_bar(ID)
MTeams$bartorvik[j] <- b_name
}
#ID_to_name(1326)
#Convert ID to bartorvik name
ID_to_bar <- function(id, error = TRUE){
indx <- DTeams$TeamID == id
if(sum(indx) == 1){
name <- DTeams$bartorvik[indx][1]
name
}else{
if (error){
stop("ID not found")
}
"None"
}}
ID_to_bar(1102)
ID_to_bar(1000)
ID_to_bar(1000, error = FALSE)
#Create a column in Mteams for the bartorvik ids
MTeams$bartorvik <- as.character(0)
L <- length(MTeams$TeamID)
for (j in 1:L){
ID <- MTeams$TeamID[j]
b_name <- ID_to_bar(ID, error = FALSE)
MTeams$bartorvik[j] <- b_name
}
head(MTeams)
tail(MTeams)
#How many exact matches:
sum(MTeams$bartorvik == "None")/371
matched <- MTeams$bartorvik != "None"
MTeams_keep <- MTeams[matched,]
MTeams_sort <- MTeams[!matched,]
MTeams_sort
#Remove team names that found an exact match
teams_bartorvik1 <- teams_bartorvik[!(teams_bartorvik %in% MTeams_keep$TeamName)]
head(teams_bartorvik1)
#Repeat matching, but only look at bartrovik1 for matches
L <- length(MTeams_sort$TeamID)
for (j in 1:L){
name <- MTeams_sort$TeamName[j]
b_name <- name_match(name, teams_bartorvik1)
MTeams_sort$bartorvik[j] <- b_name
}
MTeams_sort
write.table(MTeams_sort, "bartorvik_sort.csv", col.names = T, row.names = F, sep = ",")
#Use name search to find best remaining names
name_search("Birmingham", teams_bartorvik1)
#Use name search to find best remaining names
name_search("Maryland", teams_bartorvik1)
#Use name search to find best remaining names
name_search("Illinois", teams_bartorvik1)
#Read back in sorted teams
MTeams_sorted <- read.csv("bartorvik_sort.csv", header = T, sep = ",")
head(MTeams_sorted)
New <- MTeams_sorted[MTeams_sorted$match == 1, 1:5]
MTeams <- rbind(MTeams_keep, New)
Unmatched <- MTeams_sorted[MTeams_sorted$X == 0, 1:5]
Unmatched
Unmatched <- MTeams_sorted[MTeams_sorted$match == 0, 1:5]
Unmatched
sum(MTEams$bartorvik == "0")
sum(MTeams$bartorvik == "0")
View(MTeams)
yr
#For validation, we will not add scores data, and only use regular games from the challenge dataset.
file <- paste("TeamList", yr, ".csv", sep = "")
write.table(MTeams, file, row.names = FALSE, col.names = TRUE, sep = ",")
