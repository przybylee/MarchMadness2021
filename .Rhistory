abline(v = 1969)
abline(v = 1977)
abline(v = 1973)
load("C:/Users/Lee/Box/Iowa State/Baseball/CSL Project 2019/DI_LeagueComparisons/ComparisonsWithMLB/PlyrEffRegWorkspace.RData")
#confidence interval for lm
conf_int.lm_sp=function(lmout,c,d=0,a){
c.sp <- Matrix(c, sparse = T)
b=Matrix(coef(lmout), sparse = T)
var.b <- Matrix(vcov(lmout), sparse = T)
X=Matrix(model.matrix(lmout), sparse = T)
df= nrow(X) - length(b)
cb.d=c%*%b-d
X.X <- t(X)%*%X
tquant <- qt(1-a/2,df)
std.dev = sqrt(c%*%var.b%*%t(c))
lower = cb.d - tquant%*%sqrt(c%*%var.b%*%t(c))
upper = cb.d + tquant%*%sqrt(c%*%var.b%*%t(c))
data.frame(est = cb.d, std.dev = std.dev, lower = lower, upper = upper)
}
par.names <- names(coef(plyr.reg))
lg1 <- "AL.1971"
d.lg1 <- hit[hit$lg.yr == lg1,]
roster1 <- unique(d.lg1$Plyr)
peffs1 <- paste("Plyr", roster1, sep = "")
c.ros1 <- ifelse(par.names %in% peffs1, 1, 0)
c.ros1 <- c.ros1/sum(c.ros1)
#Experiment with original conf_int function
t0 <- Sys.time()
d1 <- conf_int.lm(plyr.reg, c.lg1, a = 0.05)
tf<- Sys.time()
tf-t0
c.lg1 <- ifelse(par.names ==  paste("lg.yr", lg1, sep = ""), 1, 0)
t0 <- Sys.time()
d1 <- conf_int.lm(plyr.reg, c.lg1, a = 0.05)
tf<- Sys.time()
tf-t0
View(conf_int.lm)
length(beta)
beta = coef(plyr.reg)
length(beta)
length(par.names)
Sig = vcov(plyr.reg)
ncol(Sig)
nrow(Sig)
length(c.lg1)
ncol(c.lg1%*% Sig)
nrow(c.lg1%*%Sig)
sd = c.lg1%*% Sig %*% t(c.lg1)
ncol(t(c.lg1))
ncol(c.lg1)
ncol(as.matrix(c.lg1))
beta = as.matix(coef(plyr.reg))
beta = as.matix(drop(coef(plyr.reg)))
as.matrix(c.lg1)
as.matrix(beta)
as.matrix(coef(plyr.reg))
ncol(as.matrix(c.lg1))
#confidence interval for lm
conf_int.lm=function(lmout,c,d=0,a){
b=as.matrix(coef(lmout))
c = as.matrix(c)
var.b <- vcov(lmout)
X=model.matrix(lmout)
df= nrow(X) - length(b)
cb.d=t(c)%*%b-d
X.X <- t(X)%*%X
tquant <- qt(1-a/2,df)
std.dev = sqrt(t(c)%*%var.b%*%c)
lower = cb.d - tquant%*%sqrt(t(c)%*%var.b%*%c)
upper = cb.d + tquant%*%sqrt(t(c)%*%var.b%*%c)
data.frame(est = cb.d, std.dev = std.dev, lower = lower, upper = upper)
}
par.names <- names(coef(plyr.reg))
lg1 <- "AL.1971"
d.lg1 <- hit[hit$lg.yr == lg1,]
roster1 <- unique(d.lg1$Plyr)
peffs1 <- paste("Plyr", roster1, sep = "")
c.ros1 <- ifelse(par.names %in% peffs1, 1, 0)
c.ros1 <- c.ros1/sum(c.ros1)
c.lg1 <- ifelse(par.names ==  paste("lg.yr", lg1, sep = ""), 1, 0)
t0 <- Sys.time()
d1 <- conf_int.lm(plyr.reg, c.lg1, a = 0.05)
tf<- Sys.time()
tf-t0
d1
#Experiment with sparse matrix computations:
#First check multiplication:
Z=Matrix(model.matrix(plyr.reg), sparse = T)
library(Matrix)
#Experiment with sparse matrix computations:
#First check multiplication:
Z=Matrix(model.matrix(plyr.reg), sparse = T)
#Still not enough memory
Matrix(c.lg1)
#Still not enough memory
ncol(Matrix(c.lg1, sparse = T))
#confidence interval for lm
conf_int.lm_sp=function(lmout,c,d=0,a){
c.sp <- Matrix(c, sparse = T)
b=Matrix(coef(lmout), sparse = T)
var.b <- Matrix(vcov(lmout), sparse = T)
X=Matrix(model.matrix(lmout), sparse = T)
df= nrow(X) - length(b)
cb.d=c%*%b-d
X.X <- t(X)%*%X
tquant <- qt(1-a/2,df)
std.dev = sqrt(t(c)%*%var.b%*%c)
lower = cb.d - tquant%*%sqrt(t(c)%*%var.b%*%c)
upper = cb.d + tquant%*%sqrt(t(c)%*%var.b%*%c)
data.frame(est = cb.d, std.dev = std.dev, lower = lower, upper = upper)
}
#confidence interval for lm
conf_int.lm_sp=function(lmout,c,d=0,a){
c.sp <- Matrix(c, sparse = T)
b=Matrix(coef(lmout), sparse = T)
var.b <- Matrix(vcov(lmout), sparse = T)
X=Matrix(model.matrix(lmout), sparse = T)
df= nrow(X) - length(b)
cb.d=c%*%b-d
#X.X <- t(X)%*%X
tquant <- qt(1-a/2,df)
std.dev = sqrt(t(c)%*%var.b%*%c)
lower = cb.d - tquant%*%sqrt(t(c)%*%var.b%*%c)
upper = cb.d + tquant%*%sqrt(t(c)%*%var.b%*%c)
data.frame(est = cb.d, std.dev = std.dev, lower = lower, upper = upper)
}
Sig = Matrix(vcov(plyr.reg), sparse = T)
vec = Matrix(c.lg1, sparse = T)
ncol(vec)
Sig%*%vec
t0 = Sys.time()
d2 = conf_int.lm_sp(plyr.reg, c.lg1, a = 0.5)
tf - t0
t(vec)%*%Sig%*%vec
print(d1)
sqrt(t(vec)%*%Sig%*%vec)
print(d1)
A = sqrt(t(vec)%*%Sig%*%vec)
A[1,1]
A = sqrt(t(vec)%*%Sig%*%vec)[1,1]
#confidence interval for lm
conf_int.lm_sp=function(lmout,c,d=0,a){
c.sp <- Matrix(c, sparse = T)
b=Matrix(coef(lmout), sparse = T)
var.b <- Matrix(vcov(lmout), sparse = T)
X=Matrix(model.matrix(lmout), sparse = T)
df= nrow(X) - length(b)
cb.d=(c%*%b)[1,1]-d
#X.X <- t(X)%*%X
tquant <- qt(1-a/2,df)
std.dev = sqrt(t(c)%*%var.b%*%c)[1,1]
lower = cb.d - tquant*std.dev
upper = cb.d + tquant*std.dev
data.frame(est = cb.d, std.dev = std.dev, lower = lower, upper = upper)
}
t0 = Sys.time()
d2 = conf_int.lm_sp(plyr.reg, c.lg1, a = 0.5)
tf - t0
t0 = Sys.time()
d2 = conf_int.lm_sp(plyr.reg, c.lg1, a = 0.5)
tf = Sys.time()
tf - t0
#This code takes about 1.5 minutes
print(d2)
print(d1)
HAplot
load("C:/Users/Lee/Box/Iowa State/Baseball/CSL Project 2019/DI_LeagueComparisons/ComparisonsWithMLB/ModelSelection.RData")
?gls
library(nlme)
?gls
library(geepack)
data("dietox")
head(dietox)
library(lme4)
model1 <- lmer(Weight ~ Time + (1|Pig), data = dietox)
summary(model1)
model1 <- lmer(Weight ~ Time + (1|Pig), data = dietox)
summary(dietox)
dietox$Pig <- factor(dietox$Pig)
dietox$Pig <- factor(dietox$Pig)
summary(dietox)
model1 <- lmer(Weight ~ Time + (1|Pig), data = dietox)
summary(model1)
model2 <- lmer(Weight ~ Time + (1|Litter), data = dietox)
summary(model2)
model2 <- lmer(Weight ~ Time + (1|Litter) + (1|Pig), data = dietox)
model2 <- lmer(Weight ~ Time + (1|Litter) + (1|Pig), data = dietox)
dietox$Litter <- factor(dietox$Litter)
model2 <- lmer(Weight ~ Time + (1|Litter) + (1|Pig), data = dietox)
model2 <- lmer(Weight ~ Time + (1|Litter), data = dietox)
model2 <- lmer(Weight ~ Time + (1|Litter) + (1|Litter:Pig), data = dietox)
model2 <- lmer(Weight ~ Time + (1|Litter/Pig), data = dietox)
model2 <- lmer(Weight ~ Time + (1|Litter), data = dietox)
head(dietox)
?dietox
model2 <- lmer(Weight ~ Time + (1|Litter), data = dietox)
model1 <- lmer(Weight ~ Time + (1|Pig), data = dietox)
summary(model1)
model2 <- lmer(Weight ~ Time + (1|Litter), data = dietox)
summary(model2)
model2 <- lmer(Weight ~ Time + (1|Litter) + (1|Pig), data = dietox)
library(TDA)
library(TDA)
phi0 <- function(x){
x/3
}
phi0(9)
(x+2)/3
phi2 <- function(x){
(x+2)/3
}
C3prox <- c(0)
scale <- 20
for (j in 1:20){
out0 <- phi0(C3prox)
out2 <- phi2(C3prox)
C3prox <- c(out0, out2)
}
C3prox <- matrix(C3prox, nrow = length(C3prox), ncol = 1)
C3prox <- data.frame(matrix(C3prox, nrow = length(C3prox), ncol = 1))
head(C3prox)
View(C3prox)
View(C3prox)
names(C3prox) <- "x"
head(C3prox)
ggplot(data = C3prox) + geom_point()
library(ggplot2)
ggplot(data = C3prox) + geom_point()
C3prox$y <- 0
head(C3prox)
ggplot(data = C3prox, aes(x = x, y = y)) + geom_point()
setwd("C:/Users/Lee/Git Repos/MarchMadness2021")
#Lee Przybylski 2/15/2021
library(ggplot2)
library(plyr)
teams <- read.csv("cbb.csv", header = T, sep = ",")
head(teams)
summary(teams)
#2015-2019 seasons
unique(teams$POSTSEASON)
unique(teams$SEED)
teams$tournament
teams$POSTSEASON <- as.character(teams$POSTSEASON)
head(teams)
teams$POSTSEASON <- as.character(teams$POSTSEASON)
head(teams)
unique(teams$POSTSEASON)
teams$Qtournament <- ifelse(!is.na(teams$POSTSEASON), 1,0)
tail(teams)
results <- c("Champions", "2ND", "F4", "E8", "S16", "R32", "R64", "R68")
teams$Q32 <- ifelse(teams$POSTSEASON %in% results[1:6], 1,0)
teams$Q16 <- ifelse(teams$POSTSEASON %in% results[1:5], 1,0)
teams$Q8 <- ifelse(teams$POSTSEASON %in% results[1:4], 1,0)
teams$Q4 <- ifelse(teams$POSTSEASON %in% results[1:3], 1,0)
teams$QF <- ifelse(teams$POSTSEASON %in% results[1:2], 1,0)
#What conferences do we see:
unique(teams$CONF)
power5 <-c("ACC", "B10", "B12", "SEC", "P12")
group5 <- c("Amer", "CUSA", "MWC", "SB", "MAC")
other5 <- c("WCC", "MVC", "Ivy", "Asun", "Ind")
#For each conference, count the number of final 4 appearnaces
confs <- unique(teams$CONF)
final4count <- function(conf){
v <- teams$Q4[teams$CONF == conf]
return(sum(v))
}
v <- teams$Q4[]
final4count("ACC")
confs <- as.character(unique(teams$CONF))
count <- rep(0, 33)
for (j in 1:33){
count[j] <- final4count(confs[j])
}
final4count("B10")
final4s <- data.frame(confs = confs, count = count)
head(final4s)
summary(final4s)
final4s <- final4s[final4s$count >0, ]
final4s
#plot the final 4 counts
ggplot(data = final4s, aes(x = confs, y = count)) + geom_bar(stat = "identity")+
labs(title = "Final 4 Appearances 2015 - 2019", xlab = "conference")
head(teams)
#Boxplot for offensive efficiency by conference
ggplot(data = teams, aes(x = CONF, y = ADJOE)) + geom_boxplot()
df_P5 <- teams[teams$CONF %in% power5,]
df_G5 <- teams[teams$CONF %in% group5,]
df_O5 <- teams[teams$CONF %in% other5,]
ggplot(data = df_P5, aes(x = CONF, y = ADJOE)) + geom_boxplot() +
labs(title = "Offensive Efficiency")
ggplot(data = df_G5, aes(x = CONF, y = ADJOE)) + geom_boxplot()+
labs(title = "Offensive Efficiency")
ggplot(data = df_O5, aes(x = CONF, y = ADJOE)) + geom_boxplot()+
labs(title = "Offensive Efficiency")
#Boxplot for deffencsive efficiency by conference
ggplot(data = df_P5, aes(x = CONF, y = ADJDE)) + geom_boxplot() +
labs(title = "Offensive Efficiency")
ggplot(data = df_G5, aes(x = CONF, y = ADJOE)) + geom_boxplot()+
labs(title = "Offensive Efficiency")
ggplot(data = df_O5, aes(x = CONF, y = ADJOE)) + geom_boxplot()+
labs(title = "Offensive Efficiency")
#Boxplot for tempo by conference
ggplot(data = df_P5, aes(x = CONF, y = ADJ_T)) + geom_boxplot() +
labs(title = "Adjusted Tempo")
ggplot(data = df_G5, aes(x = CONF, y = ADJ_T)) + geom_boxplot()+
labs(title = "Adjusted Tempo")
ggplot(data = df_O5, aes(x = CONF, y = ADJ_T)) + geom_boxplot()+
labs(title = "Adjusted Tempo")
#Plot where teams end up in the post season based on offense or defense
ggplot(data = teams, aes(x = ADJOE, y = ADJDE, col = POSTSEASON)) + geom_point(size = 2)
prob_16 <- glm(Q16 ~ ADJOE + ADJDE + ADJ_T, family = binomial(link = logit), data = teams)
summary(prob_16)
#Plot where all the teams S16 teams land in ADJOE, ADJDE
ggplot(data = teams, aes(x = ADJOE, y = ADJDE, col = Q16)) + geom_point(size = 2)
prob_4 <- glm(Q4 ~ ADJOE + ADJDE + ADJ_T, family = binomial(link = logit), data = teams)
summary(prob_4)
#Plot where all the teams F16 teams land in ADJOE, ADJDE
ggplot(data = teams, aes(x = ADJOE, y = ADJDE, col = Q4)) + geom_point(size = 2)
teams[teams$Q4 == 1,]
#Model to determine how factors relate to power rating
power_model <- lm(BARTHAG ~ ADJOE + ADJDE + ADJ_T, data = teams)
summary(power_model)
scores <- read.csv("Scores2020-2021.csv", header = "TRUE", sep = ",")
scores <- read.csv("Scores2020-2021.csv", header = TRUE, sep = ",")
head(scores)
head(teams)
#read in teams data for the same year
teams <- read.csv("cbb21_no_results.csv")
#read in teams data for the same year
teams <- read.csv("cbb21_no_results.csv", header = TRUE, sep = ",")
head(teams)
library(tidyverse)
#Lee Przybylski 3/10/2021
library(ggplot2)
#library(plyr)
library(tidyverse)
scores <- read.csv("Scores2020-2021.csv", header = TRUE, sep = ",")
head(scores)
#read in teams data for the same year
teams <- read.csv("cbb21_no_results.csv", header = TRUE, sep = ",")
head(teams)
teams$team
team_names <- as.str(teams$team)
team_names <- as.string(teams$team)
team_names <- as.character(teams$team)
team_names <- as.character(unique(teams$team))
team_ids <- as.character(unique(scores$Team))
stringdist::stringdist(team_names[1],team_ids)
char_min <- stringdist::stringdist(team_names[1],team_ids)
team_ids[which.min(char_min)]
which.min(char_min)
team_ids[150:165]
team_names[1:10]
options(stringsAsFactors = F)
#read in team ids from Kaggle data
MTeams <- read.csv("Kaggle Data/MTeams.csv")
head(MTeams)
head(teams)
data.table(teams)
dat1 <- data.frame("name" = paste0("abc", seq(1:5)),
"value" = round(rnorm(5), 1))
dat2 <- data.frame("name" = paste0("abd", seq(1:5)),
"other_info" = seq(11:15))
dat1$name2 <- sapply(dat1$name,
function(x){
char_min <- stringdist::stringdist(x, dat2$name)
dat2[which.min(char_min), "name"]
})
dat1
dat2
dat1 <- data.frame("name" = paste0("abc", seq(1:5)),
"value" = round(rnorm(5), 1))
dat2 <- data.frame("name" = paste0("abd", seq(1:5)),
"other_info" = seq(11:15))
dat1
dat2
#For each team in Mteams, identify the team id from the scores data and the team data
#Here is a function for identifying the closest match between two vectors of strings
name_match <- function(x){
#For each team in Mteams, identify the team id from the scores data and the team data
#Here is a function for identifying the closest match between two vectors of strings
name_match <- function(x){
char_min <- stringdist::stringdist(x, dat2$name)
dat2[which.min(char_min), "name"]
}
#For each team in Mteams, identify the team id from the scores data and the team data
#Here is a function for identifying the closest match between two vectors of strings
name_match <- function(x){
char_min <- stringdist::stringdist(x, dat2$name)
dat2[which.min(char_min), "name"]
}
#For each team in Mteams, identify the team id from the scores data and the team data
#Here is a function for identifying the closest match between two vectors of strings
name_match <- function(x,y){
char_min <- stringdist::stringdist(x, y)
dat2[which.min(char_min), "name"]
}
#For each team in Mteams, identify the team id from the scores data and the team data
#Here is a function for identifying the closest match between two vectors of strings
name_match <- function(x,y){
char_min <- stringdist::stringdist(x, y)
return(dat2[which.min(char_min), "name"])
}
#For each team in Mteams, identify the team id from the scores data and the team data
#Here is a function for identifying the closest match between two vectors of strings
name_match <- function(x,y){
char_min <- stringdist::stringdist(x, y)
y[which.min(char_min), "name"]
}
}
#For each team in Mteams, identify the team id from the scores data and the team data
#Here is a function for identifying the closest match between two vectors of strings
name_match <- function(x,y){
char_min <- stringdist::stringdist(x, y)
y[which.min(char_min)]
}
teams_scores <- as.character(unique(scores$Team))
name_match(Mteams$Team[1], teams_scores)
name_match(MTeams$Team[1], teams_scores)
MTeams$Team[1]
head(MTeams)
name_match(MTeams$TeamName[1], teams_scores)
teams_bartorvik[which.min(char_min)]
team_bartorvik <- as.character(unique(teams$team))
name_match(MTeams$TeamName[1], teams_bartorvik)
team_bartorvik <- as.character(unique(teams$team))
teams_bartorvik <- as.character(unique(teams$team))
name_match(MTeams$TeamName[1], teams_bartorvik)
#Create a column in Mteams for the bartorvik ids
MTeams$bartorvik <- NA
head(MTeams)
for (j in length(MTeams$TeamID))
#Create a column in Mteams for the bartorvik ids
MTeams$bartorvik <- NA
for (j in length(MTeams$TeamID)){
name <- MTeams$TeamID[j]
b_name <- name_match(name, teams_bartorvik)
MTeams$bartorvik[j] <- b_name
}
head(MTeams)
name
#Create a column in Mteams for the bartorvik ids
MTeams$bartorvik <- NA
for (j in length(MTeams$TeamID)){
name <- MTeams$TeamName[j]
b_name <- name_match(name, teams_bartorvik)
MTeams$bartorvik[j] <- b_name
}
head(MTeams)
name
b_name
MTeams$bartorvik[j] <- b_name
#Create a column in Mteams for the bartorvik ids
bartorvik <- rep(NA, length(Mteams$TeamID)
#Create a column in Mteams for the bartorvik ids
bartorvik <- rep(NA, length(Mteams$TeamID))
rep(0,10)
#Create a column in Mteams for the bartorvik ids
MTeams$bartorvik <- as.character(0)
head(MTeams)
for (j in length(MTeams$TeamID)){
name <- MTeams$TeamName[j]
b_name <- name_match(name, teams_bartorvik)
MTeams$bartorvik[j] <- b_name
}
head(MTeams)
name
b_name
MTeams$bartorvik[j] <- b_name
tail(MTeams)
L <- length(MTeams$TeamID)
#Create a column in Mteams for the bartorvik ids
MTeams$bartorvik <- as.character(0)
L <- length(MTeams$TeamID)
for (j in 1:L){
name <- MTeams$TeamName[j]
b_name <- name_match(name, teams_bartorvik)
MTeams$bartorvik[j] <- b_name
}
head(MTeams)
#Create a cloumn in Mteams for the ids in the scores data
MTeams$scores <- as.character(0)
L <- length(MTeams$TeamID)
#Create a cloumn in Mteams for the ids in the scores data
MTeams$scores <- as.character(0)
for (j in 1:L){
name <- MTeams$TeamName[j]
s_name <- name_match(name, teams_scores)
MTeams$bartorvik[j] <- s_name
}
head(MTeams)
tail(MTeams)
#Create a column in Mteams for the bartorvik ids
MTeams$bartorvik <- as.character(0)
L <- length(MTeams$TeamID)
for (j in 1:L){
name <- MTeams$TeamName[j]
b_name <- name_match(name, teams_bartorvik)
MTeams$bartorvik[j] <- b_name
}
head(MTeams)
tail(MTeams)
#Create a cloumn in Mteams for the ids in the scores data
MTeams$scores <- as.character(0)
for (j in 1:L){
name <- MTeams$TeamName[j]
s_name <- name_match(name, teams_scores)
MTeams$scores[j] <- s_name
}
head(MTeams)
tail(MTeams)
write.table(MTeams, file = "TeamList.csv", col.names = T, row.names = F, sep = ",")
